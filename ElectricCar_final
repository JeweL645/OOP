class Car():  # the parentheses in the class definition is empty cause we're creating this class from scratch
    """A simple attempt to represent a car"""

    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
        long_name = self.make.title()+" - "+ self.model.title()+" - "+str(self.year)
        print(long_name)

    def read_odometer(self):
        print("The car ran " + str(self.odometer_reading) + " km.")

    def update_odometer(self, mileage):
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You can't roll back the odometer reading.")

    def increment_odometer(self, miles):
        self.odometer_reading += miles




class Battery():
    """A simple attempt to model a battery for Electric Car"""
    def __init__(self, battery_size = 70):
        """Initialize battery attribute"""
        self.battery_size = battery_size

    def describe_battery(self):
        print("This car has "+str(self.battery_size)+ " -kmw battery.")

    def get_range(self):
        if self.battery_size == 70:
            range = 240
        elif self.battery_size == 85:
            range = 270
        message = "This car can go approximately "+ str(range)
        message += " miles on full charge."
        print(message)

    def upgrade_battery(self):
        self.battery_size = 85



class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicle"""

    def __init__(self, make, model, year):
        """Initialize the attributes of parent class"""
        super().__init__(make, model, year)
        self.battery = Battery()            #creating an instance of Battery class as an Attributes of Electric car



my_tesla = ElectricCar('tesla', 'model s', 'june 22,2012')
my_tesla.get_descriptive_name()
my_tesla.battery.describe_battery()          # when you call the method of Battery class you need to call with dot notation
                                             # with battery attributes and dot notation with the method name then it'll work
my_tesla.battery.get_range()
my_tesla.battery.upgrade_battery()
my_tesla.battery.describe_battery()
my_tesla.battery.get_range()
